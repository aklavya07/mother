function _0x507988(_0x5d2cb3, _0x536a77) {
    return _0x103e(_0x536a77 - -0x1a2, _0x5d2cb3);
}
(function (_0x303750, _0x7694f7) {
    const _0x1af119 = _0x303750();
    function _0x6a3a4a(_0x2af1c0, _0x4d4253) {
        return _0x103e(_0x4d4253 - 0x3cb, _0x2af1c0);
    }
    while (!![]) {
        try {
            const _0x27669e = parseInt(_0x6a3a4a(0x41a, 0x402)) / 0x1 * (-parseInt(_0x6a3a4a(0x3dc, 0x3ee)) / 0x2) + parseInt(_0x6a3a4a(0x3bd, 0x3d3)) / 0x3 * (-parseInt(_0x6a3a4a(0x403, 0x3f2)) / 0x4) + parseInt(_0x6a3a4a(0x3e6, 0x401)) / 0x5 * (-parseInt(_0x6a3a4a(0x3bf, 0x3ce)) / 0x6) + parseInt(_0x6a3a4a(0x3b9, 0x3d5)) / 0x7 + -parseInt(_0x6a3a4a(0x402, 0x3fa)) / 0x8 * (parseInt(_0x6a3a4a(0x415, 0x408)) / 0x9) + parseInt(_0x6a3a4a(0x412, 0x407)) / 0xa * (-parseInt(_0x6a3a4a(0x3df, 0x3da)) / 0xb) + parseInt(_0x6a3a4a(0x3ea, 0x3ea)) / 0xc;
            if (_0x27669e === _0x7694f7) {
                break;
            } else {
                _0x1af119['push'](_0x1af119['shift']());
            }
        } catch (_0x11c0ea) {
            _0x1af119['push'](_0x1af119['shift']());
        }
    }
}(_0x64ee, 0xde8f3));
async function copyTextToClipboard(_0x5d7d96) {
    function _0x293b72(_0x111fd2, _0x2ad054) {
        return _0x103e(_0x2ad054 - -0x38, _0x111fd2);
    }
    try {
        if (!_0x5d7d96) {
            throw new Error(_0x293b72(0xe, -0x10));
        }
        await navigator[_0x293b72(-0x50, -0x34)][_0x293b72(-0x2c, -0x26)](_0x5d7d96);
    } catch (_0x186a9a) {
        console['error']('Error\x20copying\x20to\x20clipboard:', _0x186a9a);
        throw _0x186a9a;
    }
}
async function sendToOpenAI(_0x209b5a) {
    function _0x343c0b(_0x22db47, _0x113855) {
        return _0x103e(_0x22db47 - 0x9c, _0x113855);
    }
    const _0x4cb67a = 'AIzaSyDI7pE4edUVd_u4wlDEijP-bWzvebWDRO0';
    const _0x479080 = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=' + _0x4cb67a;
    const _0x2b5544 = {
        'method': _0x343c0b(0xcf, 0xde),
        'headers': { 'Content-Type': _0x343c0b(0xad, 0xcb) },
        'body': JSON[_0x343c0b(0xc0, 0xb1)]({ 'contents': [{ 'parts': [{ 'text': _0x209b5a }] }] })
    };
    try {
        const _0x1a6382 = await fetch(_0x479080, _0x2b5544);
        if (!_0x1a6382['ok']) {
            throw new Error(_0x343c0b(0xb6, 0xce) + _0x1a6382[_0x343c0b(0xa1, 0x91)]);
        }
        const _0x5c9bc0 = await _0x1a6382['json']();
        const _0x551038 = _0x5c9bc0[_0x343c0b(0xb7, 0x99)];
        const _0x11cdb0 = _0x551038[0x0][_0x343c0b(0xaf, 0x96)][_0x343c0b(0xb0, 0xbf)][0x0][_0x343c0b(0x9c, 0x9c)];
        console[_0x343c0b(0xc9, 0xbd)](_0x343c0b(0xa8, 0xac), _0x11cdb0);
        await copyTextToClipboard(_0x11cdb0);
        return _0x11cdb0;
    } catch (_0x50f89b) {
        console['error']('Error:', _0x50f89b['message']);
        throw _0x50f89b;
    }
}
async function handleDoubleClick(_0x505691) {
    function _0x1aee95(_0x36c54d, _0x29b1aa) {
        return _0x103e(_0x36c54d - -0xf8, _0x29b1aa);
    }
    try {
        const _0x4e322e = _0x505691['target'][_0x1aee95(-0xce, -0xdb)](_0x1aee95(-0xc4, -0xb9));
        if (!_0x4e322e)
            throw new Error(_0x1aee95(-0xd7, -0xe3));
        const _0x2b3e28 = _0x4e322e[_0x1aee95(-0xc7, -0xb1)][_0x1aee95(-0xe8, -0xeb)](/\n{3,}/g, '\x0a')[_0x1aee95(-0xc6, -0xbd)]();
        console['log'](_0x1aee95(-0xd2, -0xca), _0x2b3e28);
        const _0x85775b = document[_0x1aee95(-0xd3, -0xcc)](_0x1aee95(-0xe0, -0xf8));
        let _0x569261 = '';
        if (!_0x85775b) {
            _0x569261 = _0x2b3e28 + _0x1aee95(-0xed, -0xde);
        } else {
            _0x569261 = _0x2b3e28 + _0x1aee95(-0xc0, -0xab) + _0x85775b['innerText'] + _0x1aee95(-0xda, -0xf7);
        }
        console[_0x1aee95(-0xcb, -0xbe)](_0x1aee95(-0xcf, -0xee), _0x569261);
        await copyTextToClipboard(_0x569261);
        _0x569261 = await navigator[_0x1aee95(-0xf4, -0xed)][_0x1aee95(-0xdf, -0xd3)]();
        await sendToOpenAI(_0x569261);
        const _0x31b2d2 = document['querySelector'](_0x1aee95(-0xe3, -0xf2));
        if (_0x31b2d2) {
            _0x31b2d2['style'][_0x1aee95(-0xf7, -0xf7)] = _0x1aee95(-0xdc, -0xca);
            setTimeout(() => {
                function _0x14a0d2(_0x4b4672, _0x2132ea) {
                    return _0x1aee95(_0x4b4672 - 0x209, _0x2132ea);
                }
                _0x31b2d2[_0x14a0d2(0x133, 0x143)][_0x14a0d2(0x112, 0xfa)] = _0x14a0d2(0x14c, 0x158);
            }, 0xbb8);
        }
    } catch (_0x5d4d6c) {
        console[_0x1aee95(-0xcd, -0xe0)](_0x1aee95(-0xcc, -0xcd), _0x5d4d6c[_0x1aee95(-0xf2, -0xdb)]);
    }
}
function Hack() {
    const _0x49a828 = new MutationObserver((_0x409e83, _0x1bfa2c) => {
        function _0x2cf31c(_0x248ed5, _0x57ba91) {
            return _0x103e(_0x57ba91 - -0x186, _0x248ed5);
        }
        if (document[_0x2cf31c(-0x160, -0x161)](_0x2cf31c(-0x16a, -0x152))) {
            _0x1bfa2c[_0x2cf31c(-0x168, -0x151)]();
        }
    });
    _0x49a828[_0x1a644f(0xb5, 0xbf)](document, {
        'childList': !![],
        'subtree': !![]
    });
    function _0x1a644f(_0x4bf049, _0xb469b5) {
        return _0x103e(_0x4bf049 - 0x9e, _0xb469b5);
    }
    document[_0x1a644f(0xab, 0x91)](_0x1a644f(0xa5, 0x88), handleDoubleClick);
}
document['addEventListener'](_0x507988(-0x180, -0x199), _0x6db265 => {
    function _0x44b748(_0x2214e3, _0x2038bb) {
        return _0x507988(_0x2214e3, _0x2038bb - 0x530);
    }
    if (_0x6db265[_0x44b748(0x373, 0x390)] && _0x6db265[_0x44b748(0x3ae, 0x3bc)] === 'y' || _0x6db265['altKey'] && _0x6db265[_0x44b748(0x3b2, 0x3bc)] === 'y') {
        navigator[_0x44b748(0x3ab, 0x392)]['readText']()[_0x44b748(0x3ae, 0x3ab)](_0x43eb2f => {
            function _0x2b1c73(_0x407799, _0x5e4acb) {
                return _0x44b748(_0x5e4acb, _0x407799 - -0x70e);
            }
            if (document[_0x2b1c73(-0x36a, -0x373)] instanceof HTMLInputElement || document[_0x2b1c73(-0x36a, -0x35e)] instanceof HTMLTextAreaElement) {
                document[_0x2b1c73(-0x36a, -0x356)][_0x2b1c73(-0x372, -0x361)] = _0x43eb2f;
                document['activeElement'][_0x2b1c73(-0x347, -0x359)](new Event(_0x2b1c73(-0x360, -0x350), { 'bubbles': !![] }));
            }
        })[_0x44b748(0x3cb, 0x3be)](_0x7b33ec => {
            function _0x56564a(_0x41664b, _0x2a437e) {
                return _0x44b748(_0x41664b, _0x2a437e - -0x17a);
            }
            console[_0x56564a(0x25b, 0x23f)](_0x56564a(0x238, 0x24e), _0x7b33ec);
        });
    }
});
function _0x103e(_0x43da7d, _0x64ee5b) {
    const _0x103eb3 = _0x64ee();
    _0x103e = function (_0x101a98, _0x5f3f75) {
        _0x101a98 = _0x101a98 - 0x0;
        let _0x5023fe = _0x103eb3[_0x101a98];
        return _0x5023fe;
    };
    return _0x103e(_0x43da7d, _0x64ee5b);
}
function _0x64ee() {
    const _0x33d011 = [
        'ctrlKey',
        '10914096CNDqjf',
        'clipboard',
        'status',
        'message',
        'dblclick',
        '33LeOPWm',
        'keydown',
        '5313217gUsCLE',
        '\x20please\x20Solve\x20a\x20question\x20in\x20simple\x20way\x20in\x20c++\x20Language\x20format',
        'Extracted\x20Text:',
        'addEventListener',
        'value',
        '3369663IqjIkZ',
        'replace',
        'application/json',
        'writeText',
        'content',
        'parts',
        '.lg\x5c:t-mb-15.t-mb-10.t-text-black.t-text-big.lg\x5c:t-text-xl.t-font-bold',
        'activeElement',
        'observe',
        '[aria-labelledby=\x22instruction-card\x22]',
        'readText',
        'HTTP\x20error!\x20Status:\x20',
        'candidates',
        'grey',
        'then',
        '\x0a\x20print\x20in\x20proper\x20c++\x20Language\x20\x20the\x20output\x20that\x20he/she\x20asked\x20for,\x20keeping\x20in\x20mind\x20this\x20thing.',
        '41559792SfeXEr',
        'input',
        'Target\x20element\x20not\x20found',
        'style',
        '78158dRFwPi',
        'stringify',
        'querySelector',
        'Cleaned\x20Text:',
        '329884xxMpgL',
        'Text\x20not\x20found',
        'Formatted\x20Clipboard\x20Text:',
        'closest',
        'error',
        'Error:',
        'log',
        'key',
        '1913080iNKZJR',
        'catch',
        'innerText',
        'trim',
        'POST',
        'div[aria-labelledby=\x22each-type-question\x22]',
        'disconnect',
        '5RBJWgB',
        '1UlRSzx',
        '\x20using\x20',
        'dispatchEvent',
        'Failed\x20to\x20paste:',
        'black',
        '10SBlDPe',
        '9nulPFw',
        'text',
        'color'
    ];
    _0x64ee = function () {
        return _0x33d011;
    };
    return _0x64ee();
}
setTimeout(() => {
    Hack();
}, 0x9c40);
